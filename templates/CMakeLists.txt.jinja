# CMakeLists.txt for generated CBOR code
# This file is generated by ailuropoda and can be included in a user's CMake project
# via add_subdirectory().

cmake_minimum_required(VERSION 3.15)
# This project name is internal to the generated subdirectory
project({{ generated_library_name }}_project C CXX)

# Include the dependency management script if it exists (copied by ailuropoda).
# This allows the generated code to find its own dependencies (TinyCBOR, Doctest)
# even if the parent project doesn't use FetchContent or has different paths.
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/dependency.cmake")
    include("${CMAKE_CURRENT_SOURCE_DIR}/dependency.cmake")
    setup_dependencies()
else()
    # Fallback if dependency.cmake isn't copied (e.g., older generator version).
    # User might need to provide CMAKE_PREFIX_PATH for TinyCBOR.
    find_package(TinyCBOR CONFIG REQUIRED)
    # Note: Doctest is typically not needed for just the generated library, only for tests.
endif()

# Add the generated library
add_library({{ generated_library_name }} STATIC
    {{ generated_c_file_name }}
)

# Set include directories for the generated library
target_include_directories({{ generated_library_name }} PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}> # For cbor_generated.h itself
    $<BUILD_INTERFACE:${tinycbor_SOURCE_DIR}>      # For tinycbor headers from FetchContent
)

# Link the generated library against TinyCBOR
target_link_libraries({{ generated_library_name }} PRIVATE
    TinyCBOR::tinycbor # Use the target provided by TinyCBOR's CMake
)

# Test harness logic is no longer generated here.
# Integration tests will manage their own compilation and linking of generated code.
# Users will integrate this generated library into their own test setups.
