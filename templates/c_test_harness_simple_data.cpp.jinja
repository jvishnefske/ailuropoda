#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest/doctest.h" // Include doctest
#include <string> // For std::string
#include <vector> // For std::vector
#include "cbor_generated.h" // Include the generated header
#include "{{ input_header_path }}" // Include the original header with struct definitions
#include "tinycbor/cbor.h" // Include tinycbor for direct usage if needed

TEST_CASE("SimpleData encoding and decoding") {
    MESSAGE("Test harness for {{ input_header_path }} running.");

    // Example usage of generated functions (simplified)
    // Test SimpleData
    struct SimpleData test_data = {
        .id = 123,
        .name = "TestName",
        .is_active = true,
        .temperature = 25.5f, // Use float literal
        .flags = {1, 2, 3, 4}
    };

    uint8_t buffer[256];
    CborEncoder encoder;
    cbor_encoder_init(&encoder, buffer, sizeof(buffer), 0);

    CHECK(encode_SimpleData(&test_data, &encoder));
    MESSAGE("SimpleData encoded successfully.");

    size_t encoded_len = cbor_encoder_get_buffer_size(&encoder, buffer);
    MESSAGE("Encoded size: " << encoded_len << " bytes");

    // Decode back
    struct SimpleData decoded_data;
    // Initialize decoded_data to zeros to ensure char arrays are null-terminated
    // if the decoded string is shorter than the buffer.
    memset(&decoded_data, 0, sizeof(struct SimpleData));

    CborParser parser; CborValue it;
    CborError err = cbor_parser_init(buffer, encoded_len, 0, &parser, &it);
    CHECK(err == CborNoError);
    if (CHECK(decode_SimpleData(&decoded_data, &it))) {
        MESSAGE("SimpleData decoded successfully.");

        MESSAGE("Decoded ID: " << decoded_data.id);
        MESSAGE("Decoded Name: " << decoded_data.name);
        MESSAGE("Decoded Is Active: " << (decoded_data.is_active ? "true" : "false"));
        MESSAGE("Decoded Temperature: " << decoded_data.temperature);
        MESSAGE("Decoded Flags: [" << (int)decoded_data.flags[0] << ", " << (int)decoded_data.flags[1] << ", " << (int)decoded_data.flags[2] << ", " << (int)decoded_data.flags[3] << "]");

        CHECK_EQ(decoded_data.id, test_data.id);
        CHECK_EQ(decoded_data.name, test_data.name);
        CHECK_EQ(decoded_data.is_active, test_data.is_active);
        CHECK_EQ(decoded_data.temperature, doctest::Approx(test_data.temperature)); // Use Approx for floats
        CHECK_ARRAY_EQ(decoded_data.flags, test_data.flags, sizeof(test_data.flags));
    }
}

TEST_CASE("NestedData encoding and decoding") {

    // Test NestedData (requires manual allocation for char* description)
    struct NestedData original_nested = {
        .inner_data = {
            .id = 456,
            .name = "NestedItem",
            .is_active = false,
            .temperature = 99.9f,
            .flags = {5, 6, 7, 8}
        },
        .description = (char*)malloc(256), // Allocate memory for description for encoding
        .value = 789
    };
    if (!original_nested.description) {
        FAIL("Failed to allocate memory for description.");
        return; // Return from the test case
    }
    strcpy(original_nested.description, "This is a nested description.");

    uint8_t nested_buffer[512];
    CborEncoder nested_encoder;
    cbor_encoder_init(&nested_encoder, nested_buffer, sizeof(nested_buffer), 0);

    CHECK(encode_NestedData(&original_nested, &nested_encoder));
    MESSAGE("NestedData encoded successfully.");
    // Only free if not in a test context (e.g., if called directly)
    // In doctest, if a CHECK fails, the test continues. If a REQUIRE fails, it aborts.
    // For malloc, it's safer to free at the end of the test case or use RAII.
    // For simplicity here, we'll free at the end of the test case.

    size_t nested_encoded_len = cbor_encoder_get_buffer_size(&nested_encoder, nested_buffer);
    MESSAGE("Nested Encoded size: " << nested_encoded_len << " bytes");

    struct NestedData decoded_nested;
    // Initialize decoded_nested to zeros before allocating description
    memset(&decoded_nested, 0, sizeof(struct NestedData)); // Initialize all members to 0
    decoded_nested.description = (char*)malloc(256); // Allocate memory for description for decoding
    if (!decoded_nested.description) {
        FAIL("Failed to allocate memory for decoded description.");
        free(original_nested.description);
        return; // Return from the test case
    }

    CborParser nested_parser; CborValue nested_it;
    CborError err = cbor_parser_init(nested_buffer, nested_encoded_len, 0, &nested_parser, &nested_it);
    CHECK_EQ(err, CborNoError);
    if (CHECK(decode_NestedData(&decoded_nested, &nested_it))) {
        MESSAGE("NestedData decoded successfully.");

        MESSAGE("Decoded Nested ID: " << decoded_nested.inner_data.id);
        MESSAGE("Decoded Nested Name: " << decoded_nested.inner_data.name);
        MESSAGE("Decoded Nested Description: " << decoded_nested.description);
        MESSAGE("Decoded Nested Value: " << decoded_nested.value);

        CHECK_EQ(decoded_nested.inner_data.id, original_nested.inner_data.id);
        CHECK_EQ(decoded_nested.inner_data.name, original_nested.inner_data.name);
        CHECK_EQ(decoded_nested.inner_data.is_active, original_nested.inner_data.is_active);
        CHECK_EQ(decoded_nested.inner_data.temperature, doctest::Approx(original_nested.inner_data.temperature));
        CHECK_ARRAY_EQ(decoded_nested.inner_data.flags, original_nested.inner_data.flags, sizeof(original_nested.inner_data.flags));
        CHECK_EQ(decoded_nested.description, original_nested.description);
        CHECK_EQ(decoded_nested.value, original_nested.value);
    }

    free(original_nested.description);
    free(decoded_nested.description);
}
